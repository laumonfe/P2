#include <dht11.h>
#include <Wire.h>
#include <bmp085.h>
#define PRES_0M 101325.0
//#S|READDATA[]
dht11 DHT11;
#define DHT11PIN 7
const int buttonPin = 2; // the number of the pushbutton pin
const int ledPin = 12; // the number of the LED pin
// variables will change:
int buttonState = 0; // variable for reading the pushbutton status
int lastButtonState = 0;
int counter = 0;
void setup() {
Serial.begin(9600);
bmp085_init();
Serial.println("DHT11 TEST PROGRAM ");
Serial.print("LIBRARY VERSION: ");
Serial.println(DHT11LIB_VERSION);
Serial.println();
// initialize the LED pin as an output:
pinMode(ledPin, OUTPUT);
// initialize the pushbutton pin as an input:
pinMode(buttonPin, INPUT);
}
void loop() {
// read the state of the pushbutton value:
buttonState = digitalRead(buttonPin);
// check if the pushbutton is pressed.
// if it is, the buttonState is HIGH:
float temp, atm, alt;
long pres;
pres = bmp085Pressure();
//atm = pres / PRES_0M;
// alt = bmp085PascalToMeter(pres, PRES_0M);
if(buttonState != lastButtonState)
{
if (buttonState == HIGH) {
digitalWrite(ledPin, HIGH);
counter ++;
}
}
else {
// turn LED off:
digitalWrite(ledPin, LOW);
}
unsigned long active;
active = millis();
lastButtonState = buttonState;
// Serial.println("\n");
if((unsigned long)( active % 1000 == 0 ))
{
int chk = DHT11.read(DHT11PIN);
Serial.print("Read sensor: ");
switch (chk)
{
case DHTLIB_OK:
Serial.println("OK");
break;
case DHTLIB_ERROR_CHECKSUM:
Serial.println("Checksum error");
break;
case DHTLIB_ERROR_TIMEOUT:
Serial.println("Time out error");
break;
default:
Serial.println("Unknown error");
break;
}
//Serial.println("#S|MINIPROJEC|[DHT11.temperature]#");
//Serial.println("#S|MINIPROJEC|[DHT11.humidity]#");
//Serial.println("#S|MINIPROJEC|[counter]#");
//Serial.println("#S|MINIPROJEC|[pres / 1000]#");
Serial.print("#S|MINIPROJEC|[");
Serial.print(DHT11.humidity);
Serial.println("]#");
Serial.print("#S|MINI2|[");
Serial.print(DHT11.temperature);
Serial.println("]#");
Serial.print("#S|MINI3|[");
Serial.print(pres);
Serial.println("]#");
Serial.print("#S|MINI4|[");
Serial.print(counter);
Serial.println("]#");
Serial.print("Humidity (%): ");
Serial.println((float)DHT11.humidity, 2);
Serial.print("Temperature (Â°C): ");
Serial.println((float)DHT11.temperature, 2);
Serial.print("buttonState pressed : ");
Serial.println(counter);
Serial.print("Pressure : ");
Serial.print(pres / 1000);
Serial.print(" kPa ");
Serial.println();
}
}
C++
The C++ program is meant to take data from the a text file and modify and print them out
onto a console window. The program uses a vector to store the data and then uses classes
for certain variables.
The program is currently printing the temperature values out, but in the finished solution the
end goal, it will print and analyse all data out to an easy to read ui.
/*
03/06/2015 by B128
This is a small program for converting data and printing the result to a terminal window
The program is meant to be a part of a larger system for analysing data
*/
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
using namespace std;
int i = 0;
//Primary class
class SensorData {
public:
SensorData (int);
int number;
};
SensorData::SensorData (int a) {
i = a;
}
//Sub-class
class Humidity: public SensorData
{
public:
int Hum;
};
//Main funktion: Reads data from *.txt file, calculates and prints to terminal
int main () {
vector<int> numbers;
ifstream myfile ("Data.txt",ios::in); //Reads Data.txt from beginning to end
int number;
int hum;
if (myfile.is_open()) //#50 and #61 creates and structures an array
{
while ( myfile >> number)
{
numbers.push_back(number);
}
myfile.close();
}
else cout << "Unable to open file";
for (int i=0; i<numbers.size(); i++) {
hum = numbers[i] - 2; //Simple example of calcution, modifing the array
cout << "Temp. is: " << numbers[i] << " Result is: " << hum << '\n';
}
cin.get();
return 0;
}
